<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta http-equiv="X-UA-Compatible" content="ie=edge">
  <script>
    const ROOM_ID = "<%= roomId %>"
  </script>
  <script src="https://unpkg.com/peerjs@1.2.0/dist/peerjs.min.js"></script>
  <!-- <script src="/socket.io/socket.io.js" defer></script> -->
  <script src="https://cdn.socket.io/4.5.0/socket.io.min.js" integrity="sha384-7EyYLQZgWBi67fBtVxw60/OWl1kjsfrPFcaU0pp0nAh+i8FD068QogUvg85Ewy1k" crossorigin="anonymous"></script>
  <title>Document</title>
  <style>
    #video-grid {
      display: grid;
      grid-template-columns: repeat(auto-fill, 300px);
      grid-auto-rows: 300px;
    }

    video {
      width: 100%;
      height: 100%;
      object-fit: cover;
    }
  </style>
</head>

<body>
  <div id="video-grid"></div>
  <script>
    const socket = io('/')

    // const myPeer = new Peer()

    const myPeer = new Peer(undefined, {
      host: '/',
      port: '3001'
    })

    myPeer.on('open', id => {
      socket.emit('join-room', ROOM_ID, id)
      console.log(`id:${id}`);
    })

    const videoGrid = document.getElementById('video-grid')
    const myVideo = document.createElement('video')
    myVideo.muted = true
    const peers = {}
    navigator.mediaDevices.getUserMedia({
      video: true,
      audio: true
    }).then(stream => {

      // create current user's video
      addVideoStream(myVideo, stream)

      // listen to call from other peers and answer them with stream.
      myPeer.on('call', call => {
        call.answer(stream)
        const video = document.createElement('video')
        call.on('stream', userVideoStream => {
          addVideoStream(video, userVideoStream)
        })
      })

      // listen to then event when other user connected
      socket.on('user-connected', userId => {
        console.log('user connected:' + userId)
        connectToNewUser(userId, stream)
      })
    })

    socket.on('user-disconnected', userId => {
      if (peers[userId]) peers[userId].close()
    })

    // when other users are onlined, call them, when they answer, obtain their videosStream and dispaly the videos.
    function connectToNewUser(userId, stream) {
      const call = myPeer.call(userId, stream)
      const video = document.createElement('video')
      call.on('stream', userVideoStream => {
        console.log(`userVideoStream: ${userVideoStream}`)
        addVideoStream(video, userVideoStream)
      })
      call.on('close', () => {
        video.remove()
      })

      peers[userId] = call
    }

    function addVideoStream(video, stream) {
      video.srcObject = stream
      video.addEventListener('loadedmetadata', () => {
        video.play()
      })
      videoGrid.append(video)
    }
  </script>
</body>

</html>